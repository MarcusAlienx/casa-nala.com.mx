"use client";

import MenuFormModal from "@/components/MenuFormModal";
import { useState, useEffect, useCallback } from "react";

// Shadcn UI components
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Toaster } from "@/components/ui/toaster";
import { useToast } from "@/hooks/use-toast"; // Assuming this is generated by shadcn

// --- Interfaces (assuming they are defined elsewhere or here) ---
interface RawMenuItem {
  Menu: string;
  "sub-menu": string;
  titulo: string;
  descripcion: string;
  Precio: string;
  "url de imagen": string;
  id?: string; // Make id optional for existing raw data, but will be added for new items
}

interface MenuItem {
  id: string; // Now mandatory for MenuItem
  nombre: string;
  detalles?: string;
  precio: number;
  image: string | null;
  category: string;
  subCategory: string;
}

// --- Helper Functions ---

const transformToRawMenu = (menuItems: MenuItem[]): RawMenuItem[] => {
  return menuItems.map((item) => ({
    Menu: item.category,
    "sub-menu": item.subCategory,
    titulo: item.nombre,
    descripcion: item.detalles || "",
    Precio: `${item.precio.toFixed(2)}`,
    "url de imagen": item.image || "/images/menu/logonala-menu.avif",
    id: item.id, // Include the id
  }));
};

// --- Component ---

export default function AdminMenuPage() {
  const [menuItems, setMenuItems] = useState<MenuItem[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [itemToEdit, setItemToEdit] = useState<MenuItem | null>(null);
  const { toast } = useToast(); // Initialize toast

  // Function to fetch and transform menu data, memoized with useCallback
  const fetchMenu = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);
      const res = await fetch("/api/menu");
      if (!res.ok) throw new Error("Failed to fetch menu");
      const rawData = await res.json();

      const transformedItems: MenuItem[] = [];
      for (const category in rawData) {
        for (const subCategory in rawData[category]) {
          for (const item of rawData[category][subCategory]) {
            transformedItems.push({
              ...item,
              id: item.id || crypto.randomUUID(),
              category,
              subCategory,
            });
          }
        }
      }
      setMenuItems(transformedItems);
    } catch (err: unknown) {
      setError((err as Error).message);
      toast({
        title: "Error",
        description: `Error al cargar el menú: ${(err as Error).message}`,
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  }, [setLoading, setError, setMenuItems, toast]); // Dependencies for useCallback

  // Fetch menu data on initial load
  useEffect(() => {
    fetchMenu();
  }, [fetchMenu]); // Added fetchMenu, removed toast

  const handleOpenModal = (item: MenuItem | null = null) => {
    setItemToEdit(item);
    setIsModalOpen(true);
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
    setItemToEdit(null);
  };

  const handleSave = async (itemToSave: MenuItem) => {
    // Create a deep clone of the current menu items state
    const newItems = JSON.parse(JSON.stringify(menuItems));

    // Find the index of the item using its ID from the form.
    // This ID could be a temporary 'item-X' for new items, or a permanent UUID for existing ones.
    const index = newItems.findIndex(
      (item: MenuItem) => item.id === itemToSave.id,
    );

    // If the item is found (editing existing)
    if (index > -1) {
      // Update the existing item in the cloned array
      newItems[index] = itemToSave;
    } else {
      // If the item is not found (adding new)
      // Assign a permanent UUID to the new item before pushing
      itemToSave.id = crypto.randomUUID(); // Assign permanent ID here for new items
      newItems.push(itemToSave);
    }

    handleCloseModal();

    try {
      console.log("\n--- CLIENT: SAVING DATA ---");
      const rawMenu = transformToRawMenu(newItems);
      console.log(
        "CLIENT: 1. Sending this raw data to server:",
        JSON.stringify(rawMenu, null, 2),
      );

      const res = await fetch("/api/menu/update", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(rawMenu),
      });

      console.log("CLIENT: 2. Server responded.");

      if (!res.ok) {
        const errorData = await res
          .json()
          .catch(() => ({ error: "Failed to save menu" }));
        throw new Error(errorData.error || "Failed to save menu");
      }

      const { updatedData } = await res.json();
      console.log(
        "CLIENT: 3. Received confirmed data from server:",
        updatedData,
      );

      const transformedItems: MenuItem[] = [];
      for (const category in updatedData) {
        for (const subCategory in updatedData[category]) {
          for (const item of updatedData[category][subCategory]) {
            transformedItems.push({
              ...item,
              id: item.id,
              category,
              subCategory,
            });
          }
        }
      }
      console.log("CLIENT: 4. Transforming confirmed data for state update.");

      setMenuItems(transformedItems);
      console.log("CLIENT: 5. State updated. UI should refresh.");

      toast({
        title: "Éxito",
        description: "Platillo guardado exitosamente.",
      });
    } catch (error: unknown) {
      console.error("Save Error:", error);
      toast({
        title: "Error al Guardar",
        description: (error as Error).message,
        variant: "destructive",
      });
      await fetchMenu();
    }
  };

  const handleDelete = async (id: string) => {
    // --- DEEP CLONE to prevent state mutation issues ---
    const newItems = JSON.parse(
      JSON.stringify(menuItems.filter((item: MenuItem) => item.id !== id)),
    );

    try {
      const rawMenu = transformToRawMenu(newItems);
      const res = await fetch("/api/menu/update", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(rawMenu),
      });

      if (!res.ok) {
        const errorData = await res
          .json()
          .catch(() => ({ error: "Failed to delete item" }));
        throw new Error(errorData.error || "Failed to delete item");
      }

      const { updatedData } = await res.json();

      const transformedItems: MenuItem[] = [];
      if (updatedData) {
        for (const category in updatedData) {
          for (const subCategory in updatedData[category]) {
            for (const item of updatedData[category][subCategory]) {
              transformedItems.push({
                ...item,
                id: item.id,
                category,
                subCategory,
              });
            }
          }
        }
      }

      setMenuItems(transformedItems);

      toast({
        title: "Éxito",
        description: "Platillo eliminado exitosamente.",
      });
    } catch (err: unknown) {
      console.error("Delete Error:", err);
      toast({
        title: "Error al Eliminar",
        description: (err as Error).message,
        variant: "destructive",
      });
      await fetchMenu();
    }
  };

  if (loading) return <div>Cargando menú...</div>;
  if (error) return <div>Error: {error}</div>;

  // Group menu items by category
  const menuByCategory = menuItems.reduce(
    (acc, item) => {
      if (!acc[item.category]) {
        acc[item.category] = [];
      }
      acc[item.category].push(item);
      return acc;
    },
    {} as Record<string, MenuItem[]>,
  );

  return (
    <div className="p-4">
      <div className="flex justify-between items-center mb-4">
        <h1 className="text-2xl font-bold">Gestión del Menú</h1>
        <Button onClick={() => handleOpenModal()}>
          Agregar Nuevo Platillo
        </Button>
      </div>

      <Accordion type="single" collapsible className="w-full">
        {Object.entries(menuByCategory).map(([category, items]) => (
          <AccordionItem value={category} key={category}>
            <AccordionTrigger className="text-xl font-semibold">
              {category}
            </AccordionTrigger>
            <AccordionContent>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {items.map((item) => (
                  <Card key={item.id}>
                    <CardHeader>
                      <CardTitle>{item.nombre}</CardTitle>
                      <CardDescription>{item.detalles}</CardDescription>
                    </CardHeader>
                    <CardContent>
                      <img
                        src={item.image || "/images/menu/logonala-menu.avif"}
                        alt={item.nombre}
                        className="w-full h-48 object-cover rounded-md mb-2"
                      />
                      <p className="text-lg font-bold">
                        ${item.precio.toFixed(2)}
                      </p>
                      <p className="text-sm text-gray-500">
                        {item.subCategory}
                      </p>
                    </CardContent>
                    <CardFooter className="flex justify-end space-x-2">
                      <Button
                        variant="outline"
                        onClick={() => handleOpenModal(item)}
                      >
                        Editar
                      </Button>
                      <AlertDialog>
                        <AlertDialogTrigger asChild>
                          <Button variant="destructive">Eliminar</Button>
                        </AlertDialogTrigger>
                        <AlertDialogContent>
                          <AlertDialogHeader>
                            <AlertDialogTitle>
                              ¿Estás absolutamente seguro?
                            </AlertDialogTitle>
                            <AlertDialogDescription>
                              Esta acción no se puede deshacer. Esto eliminará
                              permanentemente el platillo del menú.
                            </AlertDialogDescription>
                          </AlertDialogHeader>
                          <AlertDialogFooter>
                            <AlertDialogCancel>Cancelar</AlertDialogCancel>
                            <AlertDialogAction
                              onClick={() => handleDelete(item.id)}
                            >
                              Continuar
                            </AlertDialogAction>
                          </AlertDialogFooter>
                        </AlertDialogContent>
                      </AlertDialog>
                    </CardFooter>
                  </Card>
                ))}
              </div>
            </AccordionContent>
          </AccordionItem>
        ))}
      </Accordion>

      <MenuFormModal
        isOpen={isModalOpen}
        onClose={handleCloseModal}
        onSave={handleSave}
        itemToEdit={itemToEdit}
      />
      {/* Toaster component for displaying toasts */}
      <Toaster />
    </div>
  );
}
